// Mocks generated by Mockito 5.4.6 from annotations
// in oss/test/services/gating_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:functions_client/functions_client.dart' as _i3;
import 'package:gotrue/gotrue.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;
import 'package:postgrest/postgrest.dart' as _i6;
import 'package:realtime_client/realtime_client.dart' as _i5;
import 'package:storage_client/storage_client.dart' as _i4;
import 'package:supabase/src/supabase_query_builder.dart' as _i7;
import 'package:supabase/src/supabase_stream_builder.dart' as _i8;
import 'package:supabase/supabase.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGoTrueClient_0 extends _i1.SmartFake implements _i2.GoTrueClient {
  _FakeGoTrueClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFunctionsClient_1 extends _i1.SmartFake
    implements _i3.FunctionsClient {
  _FakeFunctionsClient_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSupabaseStorageClient_2 extends _i1.SmartFake
    implements _i4.SupabaseStorageClient {
  _FakeSupabaseStorageClient_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRealtimeClient_3 extends _i1.SmartFake
    implements _i5.RealtimeClient {
  _FakeRealtimeClient_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostgrestClient_4 extends _i1.SmartFake
    implements _i6.PostgrestClient {
  _FakePostgrestClient_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSupabaseQueryBuilder_5 extends _i1.SmartFake
    implements _i7.SupabaseQueryBuilder {
  _FakeSupabaseQueryBuilder_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostgrestFilterBuilder_6<T> extends _i1.SmartFake
    implements _i6.PostgrestFilterBuilder<T> {
  _FakePostgrestFilterBuilder_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRealtimeChannel_7 extends _i1.SmartFake
    implements _i5.RealtimeChannel {
  _FakeRealtimeChannel_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSupabaseStreamBuilder_8 extends _i1.SmartFake
    implements _i8.SupabaseStreamBuilder {
  _FakeSupabaseStreamBuilder_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostgrestBuilder_9<T, S> extends _i1.SmartFake
    implements _i6.PostgrestBuilder<T, S> {
  _FakePostgrestBuilder_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostgrestResponse_10<T> extends _i1.SmartFake
    implements _i6.PostgrestResponse<T> {
  _FakePostgrestResponse_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_11<T> extends _i1.SmartFake implements _i9.Future<T> {
  _FakeFuture_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostgrestTransformBuilder_12<T1> extends _i1.SmartFake
    implements _i6.PostgrestTransformBuilder<T1> {
  _FakePostgrestTransformBuilder_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SupabaseClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabaseClient extends _i1.Mock implements _i10.SupabaseClient {
  MockSupabaseClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get supabaseUrl => (super.noSuchMethod(
        Invocation.getter(#supabaseUrl),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#supabaseUrl),
        ),
      ) as String);

  @override
  String get supabaseKey => (super.noSuchMethod(
        Invocation.getter(#supabaseKey),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#supabaseKey),
        ),
      ) as String);

  @override
  String get schema => (super.noSuchMethod(
        Invocation.getter(#schema),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#schema),
        ),
      ) as String);

  @override
  String get restUrl => (super.noSuchMethod(
        Invocation.getter(#restUrl),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#restUrl),
        ),
      ) as String);

  @override
  String get realtimeUrl => (super.noSuchMethod(
        Invocation.getter(#realtimeUrl),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#realtimeUrl),
        ),
      ) as String);

  @override
  String get authUrl => (super.noSuchMethod(
        Invocation.getter(#authUrl),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#authUrl),
        ),
      ) as String);

  @override
  String get storageUrl => (super.noSuchMethod(
        Invocation.getter(#storageUrl),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#storageUrl),
        ),
      ) as String);

  @override
  String get functionsUrl => (super.noSuchMethod(
        Invocation.getter(#functionsUrl),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#functionsUrl),
        ),
      ) as String);

  @override
  _i2.GoTrueClient get auth => (super.noSuchMethod(
        Invocation.getter(#auth),
        returnValue: _FakeGoTrueClient_0(
          this,
          Invocation.getter(#auth),
        ),
      ) as _i2.GoTrueClient);

  @override
  _i3.FunctionsClient get functions => (super.noSuchMethod(
        Invocation.getter(#functions),
        returnValue: _FakeFunctionsClient_1(
          this,
          Invocation.getter(#functions),
        ),
      ) as _i3.FunctionsClient);

  @override
  _i4.SupabaseStorageClient get storage => (super.noSuchMethod(
        Invocation.getter(#storage),
        returnValue: _FakeSupabaseStorageClient_2(
          this,
          Invocation.getter(#storage),
        ),
      ) as _i4.SupabaseStorageClient);

  @override
  _i5.RealtimeClient get realtime => (super.noSuchMethod(
        Invocation.getter(#realtime),
        returnValue: _FakeRealtimeClient_3(
          this,
          Invocation.getter(#realtime),
        ),
      ) as _i5.RealtimeClient);

  @override
  _i6.PostgrestClient get rest => (super.noSuchMethod(
        Invocation.getter(#rest),
        returnValue: _FakePostgrestClient_4(
          this,
          Invocation.getter(#rest),
        ),
      ) as _i6.PostgrestClient);

  @override
  Map<String, String> get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: <String, String>{},
      ) as Map<String, String>);

  @override
  set auth(_i2.GoTrueClient? _auth) => super.noSuchMethod(
        Invocation.setter(
          #auth,
          _auth,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set functions(_i3.FunctionsClient? _functions) => super.noSuchMethod(
        Invocation.setter(
          #functions,
          _functions,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set storage(_i4.SupabaseStorageClient? _storage) => super.noSuchMethod(
        Invocation.setter(
          #storage,
          _storage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set realtime(_i5.RealtimeClient? _realtime) => super.noSuchMethod(
        Invocation.setter(
          #realtime,
          _realtime,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set rest(_i6.PostgrestClient? _rest) => super.noSuchMethod(
        Invocation.setter(
          #rest,
          _rest,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set headers(Map<String, String>? headers) => super.noSuchMethod(
        Invocation.setter(
          #headers,
          headers,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.SupabaseQueryBuilder from(String? table) => (super.noSuchMethod(
        Invocation.method(
          #from,
          [table],
        ),
        returnValue: _FakeSupabaseQueryBuilder_5(
          this,
          Invocation.method(
            #from,
            [table],
          ),
        ),
      ) as _i7.SupabaseQueryBuilder);

  @override
  _i6.PostgrestClient useSchema(String? schema) => (super.noSuchMethod(
        Invocation.method(
          #useSchema,
          [schema],
        ),
        returnValue: _FakePostgrestClient_4(
          this,
          Invocation.method(
            #useSchema,
            [schema],
          ),
        ),
      ) as _i6.PostgrestClient);

  @override
  _i6.PostgrestFilterBuilder<dynamic> rpc(
    String? fn, {
    Map<String, dynamic>? params,
    _i6.FetchOptions? options = const _i6.FetchOptions(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #rpc,
          [fn],
          {
            #params: params,
            #options: options,
          },
        ),
        returnValue: _FakePostgrestFilterBuilder_6<dynamic>(
          this,
          Invocation.method(
            #rpc,
            [fn],
            {
              #params: params,
              #options: options,
            },
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<dynamic>);

  @override
  _i5.RealtimeChannel channel(
    String? name, {
    _i5.RealtimeChannelConfig? opts = const _i5.RealtimeChannelConfig(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #channel,
          [name],
          {#opts: opts},
        ),
        returnValue: _FakeRealtimeChannel_7(
          this,
          Invocation.method(
            #channel,
            [name],
            {#opts: opts},
          ),
        ),
      ) as _i5.RealtimeChannel);

  @override
  List<_i5.RealtimeChannel> getChannels() => (super.noSuchMethod(
        Invocation.method(
          #getChannels,
          [],
        ),
        returnValue: <_i5.RealtimeChannel>[],
      ) as List<_i5.RealtimeChannel>);

  @override
  _i9.Future<String> removeChannel(_i5.RealtimeChannel? channel) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeChannel,
          [channel],
        ),
        returnValue: _i9.Future<String>.value(_i11.dummyValue<String>(
          this,
          Invocation.method(
            #removeChannel,
            [channel],
          ),
        )),
      ) as _i9.Future<String>);

  @override
  _i9.Future<List<String>> removeAllChannels() => (super.noSuchMethod(
        Invocation.method(
          #removeAllChannels,
          [],
        ),
        returnValue: _i9.Future<List<String>>.value(<String>[]),
      ) as _i9.Future<List<String>>);

  @override
  _i9.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [SupabaseQueryBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabaseQueryBuilder extends _i1.Mock
    implements _i7.SupabaseQueryBuilder {
  MockSupabaseQueryBuilder() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.SupabaseStreamBuilder stream({required List<String>? primaryKey}) =>
      (super.noSuchMethod(
        Invocation.method(
          #stream,
          [],
          {#primaryKey: primaryKey},
        ),
        returnValue: _FakeSupabaseStreamBuilder_8(
          this,
          Invocation.method(
            #stream,
            [],
            {#primaryKey: primaryKey},
          ),
        ),
      ) as _i8.SupabaseStreamBuilder);

  @override
  _i6.PostgrestFilterBuilder<R> select<R>([
    String? columns = '*',
    _i6.FetchOptions? options = const _i6.FetchOptions(),
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #select,
          [
            columns,
            options,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_6<R>(
          this,
          Invocation.method(
            #select,
            [
              columns,
              options,
            ],
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<R>);

  @override
  _i6.PostgrestFilterBuilder<dynamic> insert(
    dynamic values, {
    bool? defaultToNull = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [values],
          {#defaultToNull: defaultToNull},
        ),
        returnValue: _FakePostgrestFilterBuilder_6<dynamic>(
          this,
          Invocation.method(
            #insert,
            [values],
            {#defaultToNull: defaultToNull},
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<dynamic>);

  @override
  _i6.PostgrestFilterBuilder<dynamic> upsert(
    dynamic values, {
    String? onConflict,
    bool? ignoreDuplicates = false,
    bool? defaultToNull = true,
    _i6.FetchOptions? options = const _i6.FetchOptions(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #upsert,
          [values],
          {
            #onConflict: onConflict,
            #ignoreDuplicates: ignoreDuplicates,
            #defaultToNull: defaultToNull,
            #options: options,
          },
        ),
        returnValue: _FakePostgrestFilterBuilder_6<dynamic>(
          this,
          Invocation.method(
            #upsert,
            [values],
            {
              #onConflict: onConflict,
              #ignoreDuplicates: ignoreDuplicates,
              #defaultToNull: defaultToNull,
              #options: options,
            },
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<dynamic>);

  @override
  _i6.PostgrestFilterBuilder<dynamic> update(
    Map<dynamic, dynamic>? values, {
    _i6.FetchOptions? options = const _i6.FetchOptions(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [values],
          {#options: options},
        ),
        returnValue: _FakePostgrestFilterBuilder_6<dynamic>(
          this,
          Invocation.method(
            #update,
            [values],
            {#options: options},
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<dynamic>);

  @override
  _i6.PostgrestFilterBuilder<dynamic> delete({
    _i6.ReturningOption? returning = _i6.ReturningOption.representation,
    _i6.FetchOptions? options = const _i6.FetchOptions(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {
            #returning: returning,
            #options: options,
          },
        ),
        returnValue: _FakePostgrestFilterBuilder_6<dynamic>(
          this,
          Invocation.method(
            #delete,
            [],
            {
              #returning: returning,
              #options: options,
            },
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<dynamic>);

  @override
  _i6.PostgrestBuilder<R, dynamic> withConverter<R>(
          _i6.PostgrestConverter<R, dynamic>? converter) =>
      (super.noSuchMethod(
        Invocation.method(
          #withConverter,
          [converter],
        ),
        returnValue: _FakePostgrestBuilder_9<R, dynamic>(
          this,
          Invocation.method(
            #withConverter,
            [converter],
          ),
        ),
      ) as _i6.PostgrestBuilder<R, dynamic>);

  @override
  _i9.Future<_i6.PostgrestResponse<dynamic>> execute({
    bool? head = false,
    _i6.CountOption? count,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {
            #head: head,
            #count: count,
          },
        ),
        returnValue: _i9.Future<_i6.PostgrestResponse<dynamic>>.value(
            _FakePostgrestResponse_10<dynamic>(
          this,
          Invocation.method(
            #execute,
            [],
            {
              #head: head,
              #count: count,
            },
          ),
        )),
      ) as _i9.Future<_i6.PostgrestResponse<dynamic>>);

  @override
  void appendSearchParams(
    String? key,
    String? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #appendSearchParams,
          [
            key,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void overrideSearchParams(
    String? key,
    String? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #overrideSearchParams,
          [
            key,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Stream<dynamic> asStream() => (super.noSuchMethod(
        Invocation.method(
          #asStream,
          [],
        ),
        returnValue: _i9.Stream<dynamic>.empty(),
      ) as _i9.Stream<dynamic>);

  @override
  _i9.Future<dynamic> catchError(
    Function? onError, {
    bool Function(Object)? test,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #catchError,
          [onError],
          {#test: test},
        ),
        returnValue: _i9.Future<dynamic>.value(),
      ) as _i9.Future<dynamic>);

  @override
  _i9.Future<R> then<R>(
    _i9.FutureOr<R> Function(dynamic)? onValue, {
    Function? onError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #then,
          [onValue],
          {#onError: onError},
        ),
        returnValue: _i11.ifNotNull(
              _i11.dummyValueOrNull<R>(
                this,
                Invocation.method(
                  #then,
                  [onValue],
                  {#onError: onError},
                ),
              ),
              (R v) => _i9.Future<R>.value(v),
            ) ??
            _FakeFuture_11<R>(
              this,
              Invocation.method(
                #then,
                [onValue],
                {#onError: onError},
              ),
            ),
      ) as _i9.Future<R>);

  @override
  _i9.Future<dynamic> timeout(
    Duration? timeLimit, {
    _i9.FutureOr<dynamic> Function()? onTimeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #timeout,
          [timeLimit],
          {#onTimeout: onTimeout},
        ),
        returnValue: _i9.Future<dynamic>.value(),
      ) as _i9.Future<dynamic>);

  @override
  _i9.Future<dynamic> whenComplete(_i9.FutureOr<void> Function()? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #whenComplete,
          [action],
        ),
        returnValue: _i9.Future<dynamic>.value(),
      ) as _i9.Future<dynamic>);
}

/// A class which mocks [PostgrestFilterBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostgrestFilterBuilder<T> extends _i1.Mock
    implements _i6.PostgrestFilterBuilder<T> {
  MockPostgrestFilterBuilder() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.PostgrestFilterBuilder<T> not(
    String? column,
    String? operator,
    dynamic value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #not,
          [
            column,
            operator,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_6<T>(
          this,
          Invocation.method(
            #not,
            [
              column,
              operator,
              value,
            ],
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<T>);

  @override
  _i6.PostgrestFilterBuilder<T> or(
    String? filters, {
    String? foreignTable,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #or,
          [filters],
          {#foreignTable: foreignTable},
        ),
        returnValue: _FakePostgrestFilterBuilder_6<T>(
          this,
          Invocation.method(
            #or,
            [filters],
            {#foreignTable: foreignTable},
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<T>);

  @override
  _i6.PostgrestFilterBuilder<T> eq(
    String? column,
    dynamic value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #eq,
          [
            column,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_6<T>(
          this,
          Invocation.method(
            #eq,
            [
              column,
              value,
            ],
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<T>);

  @override
  _i6.PostgrestFilterBuilder<T> neq(
    String? column,
    dynamic value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #neq,
          [
            column,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_6<T>(
          this,
          Invocation.method(
            #neq,
            [
              column,
              value,
            ],
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<T>);

  @override
  _i6.PostgrestFilterBuilder<T> gt(
    String? column,
    dynamic value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #gt,
          [
            column,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_6<T>(
          this,
          Invocation.method(
            #gt,
            [
              column,
              value,
            ],
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<T>);

  @override
  _i6.PostgrestFilterBuilder<T> gte(
    String? column,
    dynamic value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #gte,
          [
            column,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_6<T>(
          this,
          Invocation.method(
            #gte,
            [
              column,
              value,
            ],
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<T>);

  @override
  _i6.PostgrestFilterBuilder<T> lt(
    String? column,
    dynamic value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #lt,
          [
            column,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_6<T>(
          this,
          Invocation.method(
            #lt,
            [
              column,
              value,
            ],
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<T>);

  @override
  _i6.PostgrestFilterBuilder<T> lte(
    String? column,
    dynamic value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #lte,
          [
            column,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_6<T>(
          this,
          Invocation.method(
            #lte,
            [
              column,
              value,
            ],
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<T>);

  @override
  _i6.PostgrestFilterBuilder<T> like(
    String? column,
    String? pattern,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #like,
          [
            column,
            pattern,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_6<T>(
          this,
          Invocation.method(
            #like,
            [
              column,
              pattern,
            ],
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<T>);

  @override
  _i6.PostgrestFilterBuilder<dynamic> likeAllOf(
    String? column,
    List<String>? patterns,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #likeAllOf,
          [
            column,
            patterns,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_6<dynamic>(
          this,
          Invocation.method(
            #likeAllOf,
            [
              column,
              patterns,
            ],
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<dynamic>);

  @override
  _i6.PostgrestFilterBuilder<dynamic> likeAnyOf(
    String? column,
    List<String>? patterns,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #likeAnyOf,
          [
            column,
            patterns,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_6<dynamic>(
          this,
          Invocation.method(
            #likeAnyOf,
            [
              column,
              patterns,
            ],
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<dynamic>);

  @override
  _i6.PostgrestFilterBuilder<T> ilike(
    String? column,
    String? pattern,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #ilike,
          [
            column,
            pattern,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_6<T>(
          this,
          Invocation.method(
            #ilike,
            [
              column,
              pattern,
            ],
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<T>);

  @override
  _i6.PostgrestFilterBuilder<dynamic> ilikeAllOf(
    String? column,
    List<String>? patterns,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #ilikeAllOf,
          [
            column,
            patterns,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_6<dynamic>(
          this,
          Invocation.method(
            #ilikeAllOf,
            [
              column,
              patterns,
            ],
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<dynamic>);

  @override
  _i6.PostgrestFilterBuilder<dynamic> ilikeAnyOf(
    String? column,
    List<String>? patterns,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #ilikeAnyOf,
          [
            column,
            patterns,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_6<dynamic>(
          this,
          Invocation.method(
            #ilikeAnyOf,
            [
              column,
              patterns,
            ],
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<dynamic>);

  @override
  _i6.PostgrestFilterBuilder<T> is_(
    String? column,
    dynamic value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #is_,
          [
            column,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_6<T>(
          this,
          Invocation.method(
            #is_,
            [
              column,
              value,
            ],
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<T>);

  @override
  _i6.PostgrestFilterBuilder<T> in_(
    String? column,
    List<dynamic>? values,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #in_,
          [
            column,
            values,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_6<T>(
          this,
          Invocation.method(
            #in_,
            [
              column,
              values,
            ],
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<T>);

  @override
  _i6.PostgrestFilterBuilder<T> contains(
    String? column,
    dynamic value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #contains,
          [
            column,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_6<T>(
          this,
          Invocation.method(
            #contains,
            [
              column,
              value,
            ],
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<T>);

  @override
  _i6.PostgrestFilterBuilder<T> containedBy(
    String? column,
    dynamic value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #containedBy,
          [
            column,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_6<T>(
          this,
          Invocation.method(
            #containedBy,
            [
              column,
              value,
            ],
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<T>);

  @override
  _i6.PostgrestFilterBuilder<T> rangeLt(
    String? column,
    String? range,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #rangeLt,
          [
            column,
            range,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_6<T>(
          this,
          Invocation.method(
            #rangeLt,
            [
              column,
              range,
            ],
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<T>);

  @override
  _i6.PostgrestFilterBuilder<T> rangeGt(
    String? column,
    String? range,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #rangeGt,
          [
            column,
            range,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_6<T>(
          this,
          Invocation.method(
            #rangeGt,
            [
              column,
              range,
            ],
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<T>);

  @override
  _i6.PostgrestFilterBuilder<T> rangeGte(
    String? column,
    String? range,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #rangeGte,
          [
            column,
            range,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_6<T>(
          this,
          Invocation.method(
            #rangeGte,
            [
              column,
              range,
            ],
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<T>);

  @override
  _i6.PostgrestFilterBuilder<T> rangeLte(
    String? column,
    String? range,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #rangeLte,
          [
            column,
            range,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_6<T>(
          this,
          Invocation.method(
            #rangeLte,
            [
              column,
              range,
            ],
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<T>);

  @override
  _i6.PostgrestFilterBuilder<T> rangeAdjacent(
    String? column,
    String? range,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #rangeAdjacent,
          [
            column,
            range,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_6<T>(
          this,
          Invocation.method(
            #rangeAdjacent,
            [
              column,
              range,
            ],
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<T>);

  @override
  _i6.PostgrestFilterBuilder<T> overlaps(
    String? column,
    dynamic value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #overlaps,
          [
            column,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_6<T>(
          this,
          Invocation.method(
            #overlaps,
            [
              column,
              value,
            ],
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<T>);

  @override
  _i6.PostgrestFilterBuilder<T> textSearch(
    String? column,
    String? query, {
    String? config,
    _i6.TextSearchType? type,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #textSearch,
          [
            column,
            query,
          ],
          {
            #config: config,
            #type: type,
          },
        ),
        returnValue: _FakePostgrestFilterBuilder_6<T>(
          this,
          Invocation.method(
            #textSearch,
            [
              column,
              query,
            ],
            {
              #config: config,
              #type: type,
            },
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<T>);

  @override
  _i6.PostgrestFilterBuilder<T> filter(
    String? column,
    String? operator,
    dynamic value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #filter,
          [
            column,
            operator,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_6<T>(
          this,
          Invocation.method(
            #filter,
            [
              column,
              operator,
              value,
            ],
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<T>);

  @override
  _i6.PostgrestFilterBuilder<T> match(Map<dynamic, dynamic>? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #match,
          [query],
        ),
        returnValue: _FakePostgrestFilterBuilder_6<T>(
          this,
          Invocation.method(
            #match,
            [query],
          ),
        ),
      ) as _i6.PostgrestFilterBuilder<T>);

  @override
  _i6.PostgrestTransformBuilder<R> select<R>([String? columns = '*']) =>
      (super.noSuchMethod(
        Invocation.method(
          #select,
          [columns],
        ),
        returnValue: _FakePostgrestTransformBuilder_12<R>(
          this,
          Invocation.method(
            #select,
            [columns],
          ),
        ),
      ) as _i6.PostgrestTransformBuilder<R>);

  @override
  _i6.PostgrestTransformBuilder<T> order(
    String? column, {
    bool? ascending = false,
    bool? nullsFirst = false,
    String? foreignTable,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #order,
          [column],
          {
            #ascending: ascending,
            #nullsFirst: nullsFirst,
            #foreignTable: foreignTable,
          },
        ),
        returnValue: _FakePostgrestTransformBuilder_12<T>(
          this,
          Invocation.method(
            #order,
            [column],
            {
              #ascending: ascending,
              #nullsFirst: nullsFirst,
              #foreignTable: foreignTable,
            },
          ),
        ),
      ) as _i6.PostgrestTransformBuilder<T>);

  @override
  _i6.PostgrestTransformBuilder<T> limit(
    int? count, {
    String? foreignTable,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #limit,
          [count],
          {#foreignTable: foreignTable},
        ),
        returnValue: _FakePostgrestTransformBuilder_12<T>(
          this,
          Invocation.method(
            #limit,
            [count],
            {#foreignTable: foreignTable},
          ),
        ),
      ) as _i6.PostgrestTransformBuilder<T>);

  @override
  _i6.PostgrestTransformBuilder<T> range(
    int? from,
    int? to, {
    String? foreignTable,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #range,
          [
            from,
            to,
          ],
          {#foreignTable: foreignTable},
        ),
        returnValue: _FakePostgrestTransformBuilder_12<T>(
          this,
          Invocation.method(
            #range,
            [
              from,
              to,
            ],
            {#foreignTable: foreignTable},
          ),
        ),
      ) as _i6.PostgrestTransformBuilder<T>);

  @override
  _i6.PostgrestTransformBuilder<T> single() => (super.noSuchMethod(
        Invocation.method(
          #single,
          [],
        ),
        returnValue: _FakePostgrestTransformBuilder_12<T>(
          this,
          Invocation.method(
            #single,
            [],
          ),
        ),
      ) as _i6.PostgrestTransformBuilder<T>);

  @override
  _i6.PostgrestTransformBuilder<T> maybeSingle() => (super.noSuchMethod(
        Invocation.method(
          #maybeSingle,
          [],
        ),
        returnValue: _FakePostgrestTransformBuilder_12<T>(
          this,
          Invocation.method(
            #maybeSingle,
            [],
          ),
        ),
      ) as _i6.PostgrestTransformBuilder<T>);

  @override
  _i6.PostgrestTransformBuilder<T> csv() => (super.noSuchMethod(
        Invocation.method(
          #csv,
          [],
        ),
        returnValue: _FakePostgrestTransformBuilder_12<T>(
          this,
          Invocation.method(
            #csv,
            [],
          ),
        ),
      ) as _i6.PostgrestTransformBuilder<T>);

  @override
  _i6.PostgrestBuilder<R, T> withConverter<R>(
          _i6.PostgrestConverter<R, T>? converter) =>
      (super.noSuchMethod(
        Invocation.method(
          #withConverter,
          [converter],
        ),
        returnValue: _FakePostgrestBuilder_9<R, T>(
          this,
          Invocation.method(
            #withConverter,
            [converter],
          ),
        ),
      ) as _i6.PostgrestBuilder<R, T>);

  @override
  _i9.Future<_i6.PostgrestResponse<dynamic>> execute({
    bool? head = false,
    _i6.CountOption? count,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {
            #head: head,
            #count: count,
          },
        ),
        returnValue: _i9.Future<_i6.PostgrestResponse<dynamic>>.value(
            _FakePostgrestResponse_10<dynamic>(
          this,
          Invocation.method(
            #execute,
            [],
            {
              #head: head,
              #count: count,
            },
          ),
        )),
      ) as _i9.Future<_i6.PostgrestResponse<dynamic>>);

  @override
  void appendSearchParams(
    String? key,
    String? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #appendSearchParams,
          [
            key,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void overrideSearchParams(
    String? key,
    String? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #overrideSearchParams,
          [
            key,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Stream<T> asStream() => (super.noSuchMethod(
        Invocation.method(
          #asStream,
          [],
        ),
        returnValue: _i9.Stream<T>.empty(),
      ) as _i9.Stream<T>);

  @override
  _i9.Future<T> catchError(
    Function? onError, {
    bool Function(Object)? test,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #catchError,
          [onError],
          {#test: test},
        ),
        returnValue: _i11.ifNotNull(
              _i11.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #catchError,
                  [onError],
                  {#test: test},
                ),
              ),
              (T v) => _i9.Future<T>.value(v),
            ) ??
            _FakeFuture_11<T>(
              this,
              Invocation.method(
                #catchError,
                [onError],
                {#test: test},
              ),
            ),
      ) as _i9.Future<T>);

  @override
  _i9.Future<R> then<R>(
    _i9.FutureOr<R> Function(T)? onValue, {
    Function? onError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #then,
          [onValue],
          {#onError: onError},
        ),
        returnValue: _i11.ifNotNull(
              _i11.dummyValueOrNull<R>(
                this,
                Invocation.method(
                  #then,
                  [onValue],
                  {#onError: onError},
                ),
              ),
              (R v) => _i9.Future<R>.value(v),
            ) ??
            _FakeFuture_11<R>(
              this,
              Invocation.method(
                #then,
                [onValue],
                {#onError: onError},
              ),
            ),
      ) as _i9.Future<R>);

  @override
  _i9.Future<T> timeout(
    Duration? timeLimit, {
    _i9.FutureOr<T> Function()? onTimeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #timeout,
          [timeLimit],
          {#onTimeout: onTimeout},
        ),
        returnValue: _i11.ifNotNull(
              _i11.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #timeout,
                  [timeLimit],
                  {#onTimeout: onTimeout},
                ),
              ),
              (T v) => _i9.Future<T>.value(v),
            ) ??
            _FakeFuture_11<T>(
              this,
              Invocation.method(
                #timeout,
                [timeLimit],
                {#onTimeout: onTimeout},
              ),
            ),
      ) as _i9.Future<T>);

  @override
  _i9.Future<T> whenComplete(_i9.FutureOr<void> Function()? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #whenComplete,
          [action],
        ),
        returnValue: _i11.ifNotNull(
              _i11.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #whenComplete,
                  [action],
                ),
              ),
              (T v) => _i9.Future<T>.value(v),
            ) ??
            _FakeFuture_11<T>(
              this,
              Invocation.method(
                #whenComplete,
                [action],
              ),
            ),
      ) as _i9.Future<T>);
}
