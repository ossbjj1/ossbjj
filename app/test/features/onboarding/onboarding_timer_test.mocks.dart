// Mocks generated by Mockito 5.4.6 from annotations
// in oss/test/features/onboarding/onboarding_timer_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:oss/core/services/analytics_service.dart' as _i5;
import 'package:oss/core/services/consent_service.dart' as _i2;
import 'package:oss/core/services/profile_service.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeConsentState_0 extends _i1.SmartFake implements _i2.ConsentState {
  _FakeConsentState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProfileService].
///
/// See the documentation for Mockito's code generation for more information.
class MockProfileService extends _i1.Mock implements _i3.ProfileService {
  MockProfileService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i3.UserProfile?> fetch() => (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [],
        ),
        returnValue: _i4.Future<_i3.UserProfile?>.value(),
      ) as _i4.Future<_i3.UserProfile?>);

  @override
  _i4.Future<void> upsert(
    _i3.UserProfile? profile, {
    bool? draft = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #upsert,
          [profile],
          {#draft: draft},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [AnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalyticsService extends _i1.Mock implements _i5.AnalyticsService {
  MockAnalyticsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> initIfAllowed({required bool? analyticsAllowed}) =>
      (super.noSuchMethod(
        Invocation.method(
          #initIfAllowed,
          [],
          {#analyticsAllowed: analyticsAllowed},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void track(
    String? event, [
    Map<String, Object?>? properties,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #track,
          [
            event,
            properties,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setUser({required String? id}) => super.noSuchMethod(
        Invocation.method(
          #setUser,
          [],
          {#id: id},
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ConsentService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConsentService extends _i1.Mock implements _i2.ConsentService {
  MockConsentService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get shown => (super.noSuchMethod(
        Invocation.getter(#shown),
        returnValue: false,
      ) as bool);

  @override
  bool get analytics => (super.noSuchMethod(
        Invocation.getter(#analytics),
        returnValue: false,
      ) as bool);

  @override
  bool get media => (super.noSuchMethod(
        Invocation.getter(#media),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<_i2.ConsentState> load() => (super.noSuchMethod(
        Invocation.method(
          #load,
          [],
        ),
        returnValue: _i4.Future<_i2.ConsentState>.value(_FakeConsentState_0(
          this,
          Invocation.method(
            #load,
            [],
          ),
        )),
      ) as _i4.Future<_i2.ConsentState>);

  @override
  _i4.Future<void> setAnalytics(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #setAnalytics,
          [value],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setMedia(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #setMedia,
          [value],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> markShown() => (super.noSuchMethod(
        Invocation.method(
          #markShown,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> revokeConsent() => (super.noSuchMethod(
        Invocation.method(
          #revokeConsent,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> fetchServerAnalytics() => (super.noSuchMethod(
        Invocation.method(
          #fetchServerAnalytics,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> setServerAnalytics(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #setServerAnalytics,
          [value],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> syncAnalyticsFromServer() => (super.noSuchMethod(
        Invocation.method(
          #syncAnalyticsFromServer,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
