// Mocks generated by Mockito 5.4.6 from annotations
// in oss/test/features/settings/settings_consent_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i4;

import 'package:flutter/material.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:oss/core/services/analytics_service.dart' as _i9;
import 'package:oss/core/services/audio_service.dart' as _i8;
import 'package:oss/core/services/auth_service.dart' as _i2;
import 'package:oss/core/services/consent_service.dart' as _i5;
import 'package:oss/core/services/locale_service.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthResult_0 extends _i1.SmartFake implements _i2.AuthResult {
  _FakeAuthResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeValueNotifier_1<T> extends _i1.SmartFake
    implements _i3.ValueNotifier<T> {
  _FakeValueNotifier_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocale_2 extends _i1.SmartFake implements _i4.Locale {
  _FakeLocale_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConsentState_3 extends _i1.SmartFake implements _i5.ConsentState {
  _FakeConsentState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i2.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i2.AuthResult> signUp({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i6.Future<_i2.AuthResult>.value(_FakeAuthResult_0(
          this,
          Invocation.method(
            #signUp,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i6.Future<_i2.AuthResult>);

  @override
  _i6.Future<_i2.AuthResult> signIn({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i6.Future<_i2.AuthResult>.value(_FakeAuthResult_0(
          this,
          Invocation.method(
            #signIn,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i6.Future<_i2.AuthResult>);

  @override
  _i6.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> resetPassword({required String? email}) =>
      (super.noSuchMethod(
        Invocation.method(
          #resetPassword,
          [],
          {#email: email},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [LocaleService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocaleService extends _i1.Mock implements _i7.LocaleService {
  MockLocaleService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ValueNotifier<_i4.Locale> get localeNotifier => (super.noSuchMethod(
        Invocation.getter(#localeNotifier),
        returnValue: _FakeValueNotifier_1<_i4.Locale>(
          this,
          Invocation.getter(#localeNotifier),
        ),
      ) as _i3.ValueNotifier<_i4.Locale>);

  @override
  _i4.Locale get currentLocale => (super.noSuchMethod(
        Invocation.getter(#currentLocale),
        returnValue: _FakeLocale_2(
          this,
          Invocation.getter(#currentLocale),
        ),
      ) as _i4.Locale);

  @override
  _i6.Future<_i4.Locale> load() => (super.noSuchMethod(
        Invocation.method(
          #load,
          [],
        ),
        returnValue: _i6.Future<_i4.Locale>.value(_FakeLocale_2(
          this,
          Invocation.method(
            #load,
            [],
          ),
        )),
      ) as _i6.Future<_i4.Locale>);

  @override
  _i6.Future<void> setLocale(_i4.Locale? locale) => (super.noSuchMethod(
        Invocation.method(
          #setLocale,
          [locale],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [AudioService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioService extends _i1.Mock implements _i8.AudioService {
  MockAudioService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ValueNotifier<bool> get audioEnabled => (super.noSuchMethod(
        Invocation.getter(#audioEnabled),
        returnValue: _FakeValueNotifier_1<bool>(
          this,
          Invocation.getter(#audioEnabled),
        ),
      ) as _i3.ValueNotifier<bool>);

  @override
  bool get enabled => (super.noSuchMethod(
        Invocation.getter(#enabled),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<bool> load() => (super.noSuchMethod(
        Invocation.method(
          #load,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<void> setEnabled(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #setEnabled,
          [value],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ConsentService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConsentService extends _i1.Mock implements _i5.ConsentService {
  MockConsentService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get shown => (super.noSuchMethod(
        Invocation.getter(#shown),
        returnValue: false,
      ) as bool);

  @override
  bool get analytics => (super.noSuchMethod(
        Invocation.getter(#analytics),
        returnValue: false,
      ) as bool);

  @override
  bool get media => (super.noSuchMethod(
        Invocation.getter(#media),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<_i5.ConsentState> load() => (super.noSuchMethod(
        Invocation.method(
          #load,
          [],
        ),
        returnValue: _i6.Future<_i5.ConsentState>.value(_FakeConsentState_3(
          this,
          Invocation.method(
            #load,
            [],
          ),
        )),
      ) as _i6.Future<_i5.ConsentState>);

  @override
  _i6.Future<void> setAnalytics(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #setAnalytics,
          [value],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> setMedia(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #setMedia,
          [value],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> markShown() => (super.noSuchMethod(
        Invocation.method(
          #markShown,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> revokeConsent() => (super.noSuchMethod(
        Invocation.method(
          #revokeConsent,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<bool> fetchServerAnalytics() => (super.noSuchMethod(
        Invocation.method(
          #fetchServerAnalytics,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<void> setServerAnalytics(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #setServerAnalytics,
          [value],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> syncAnalyticsFromServer() => (super.noSuchMethod(
        Invocation.method(
          #syncAnalyticsFromServer,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [AnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalyticsService extends _i1.Mock implements _i9.AnalyticsService {
  MockAnalyticsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> initIfAllowed({required bool? analyticsAllowed}) =>
      (super.noSuchMethod(
        Invocation.method(
          #initIfAllowed,
          [],
          {#analyticsAllowed: analyticsAllowed},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void track(
    String? event, [
    Map<String, Object?>? properties,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #track,
          [
            event,
            properties,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setUser({required String? id}) => super.noSuchMethod(
        Invocation.method(
          #setUser,
          [],
          {#id: id},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> optOutAndDisable() => (super.noSuchMethod(
        Invocation.method(
          #optOutAndDisable,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
