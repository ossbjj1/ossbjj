// Mocks generated by Mockito 5.4.6 from annotations
// in oss/test/features/home/continue_card_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:oss/core/services/gating_service.dart' as _i2;
import 'package:oss/core/services/progress_service.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGatingAccess_0 extends _i1.SmartFake implements _i2.GatingAccess {
  _FakeGatingAccess_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCompleteResult_1 extends _i1.SmartFake
    implements _i2.CompleteResult {
  _FakeCompleteResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GatingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGatingService extends _i1.Mock implements _i2.GatingService {
  MockGatingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.GatingAccess> checkStepAccess(String? techniqueStepId) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkStepAccess,
          [techniqueStepId],
        ),
        returnValue: _i3.Future<_i2.GatingAccess>.value(_FakeGatingAccess_0(
          this,
          Invocation.method(
            #checkStepAccess,
            [techniqueStepId],
          ),
        )),
      ) as _i3.Future<_i2.GatingAccess>);

  @override
  _i3.Future<_i2.CompleteResult> completeStep(String? techniqueStepId) =>
      (super.noSuchMethod(
        Invocation.method(
          #completeStep,
          [techniqueStepId],
        ),
        returnValue: _i3.Future<_i2.CompleteResult>.value(_FakeCompleteResult_1(
          this,
          Invocation.method(
            #completeStep,
            [techniqueStepId],
          ),
        )),
      ) as _i3.Future<_i2.CompleteResult>);
}

/// A class which mocks [ProgressService].
///
/// See the documentation for Mockito's code generation for more information.
class MockProgressService extends _i1.Mock implements _i4.ProgressService {
  MockProgressService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.ContinueHint?> loadLast() => (super.noSuchMethod(
        Invocation.method(
          #loadLast,
          [],
        ),
        returnValue: _i3.Future<_i4.ContinueHint?>.value(),
      ) as _i3.Future<_i4.ContinueHint?>);

  @override
  _i3.Future<void> setLast(_i4.ContinueHint? hint) => (super.noSuchMethod(
        Invocation.method(
          #setLast,
          [hint],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> clearLast() => (super.noSuchMethod(
        Invocation.method(
          #clearLast,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i4.NextStepResult?> getNextStep({String? preferredVariant}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNextStep,
          [],
          {#preferredVariant: preferredVariant},
        ),
        returnValue: _i3.Future<_i4.NextStepResult?>.value(),
      ) as _i3.Future<_i4.NextStepResult?>);
}
